# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  """Gets user. (Authorized)"""
  user: User!

  """Gets any user by id. (Authorized)"""
  getUserByID(userId: String!): User!

  """Gets game. (Authorized)"""
  game(gameID: String!): Game!

  """Gets all games for user. (Authorized)"""
  games: [Game!]!
}

"""User for chess games"""
type User {
  """MongoDB id for user."""
  _id: ID!

  """Date user was created at."""
  createdAt: Timestamp!

  """Email address for user."""
  email: String!

  """User's first name."""
  firstName: String!

  """User's last name."""
  lastName: String!

  """User's middle name."""
  middleName: String

  """Company the user works for."""
  company: String

  """Position the user is in at company."""
  position: String

  """Where the user found the website."""
  foundBy: String

  """String representation of profile image."""
  profilePic: String

  """Games record for user.s"""
  record: Record!

  """ID's for games user has played or is playing."""
  gameIDs: [String!]!

  """Whether or not the user's email has been confirmed."""
  emailConfirmed: Boolean!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Record {
  wins: Int!
  losses: Int!
}

"""Data for the game."""
type Game {
  """MongoDB id for game."""
  _id: ID!

  """Date game was created at."""
  createdAt: Timestamp!

  """Array of full moves for the game."""
  history: [FullMove!]!

  """MongoDB id's for the users playing the game."""
  playerIDs: Players!

  """The latest half move."""
  lastHalfMove: CompleteHalfMove

  """Color to move after the latest move."""
  colorToMove: String!

  """Status of the game (active, complete)"""
  status: String!
}

"""
Object containing the full move (white and black moves, black is possibly undefined)
"""
type FullMove {
  white: CompleteHalfMove!
  black: CompleteHalfMove!
}

"""Object containing the state and the move played in the half move."""
type CompleteHalfMove {
  state: HalfMoveState!
  move: HalfMove!
}

"""Object containing the state of the played half move."""
type HalfMoveState {
  fen: String!
  gameState: GameState!
}

"""Object containing the state of teh game."""
type GameState {
  colorToMove: String!
  enPassant: String
  castling: CastlingAbility!
  inCheck: Boolean!
}

"""Object containing the castling ability for the game."""
type CastlingAbility {
  white: ColorCastlingAbility!
  black: ColorCastlingAbility!
}

"""Object containing the castling ability for one side."""
type ColorCastlingAbility {
  king: Boolean
  queen: Boolean
}

"""Object containing the move played."""
type HalfMove {
  from: String!
  to: String!
  color: String!
  piece: String!
  take: String
  castle: String
  enPassant: Boolean
  check: String
  promotion: String
}

"""Object containing ID's for white and black chess players."""
type Players {
  white: String!
  black: String!
}

type Mutation {
  """Register for ammarahmed.ca"""
  register(data: RegisterInput!): AuthPayload!

  """Create and send a new email confirmation code. (Authorized)"""
  newEmailCode: AuthPayload!

  """Verify email with confirmation code. (Authorized)"""
  confirmEmail(code: Int!): AuthPayload!

  """Login to ammarahmed.ca"""
  login(password: String!, email: String!): AuthPayload!

  """Send forgot password email"""
  forgotPassword(email: String!): String!

  """Reset password with encrypted token."""
  resetPassword(token: String!, newPassword: String!): String!

  """Updates user fields. (Authorized)"""
  updateUser(data: UpdateInput!): AuthPayload!

  """Creates new game. (Authorized)"""
  createGame: CreateGameResponse!

  """Adds move to game. (Authorized)"""
  addMove(executedMove: HalfMoveInput!, gameID: String!): AuthPayload!
}

"""Authorized mutations response."""
type AuthPayload {
  """JWT (json web token)"""
  token: String!
}

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  middleName: String
  company: String
  position: String
  foundBy: String
  profilePic: String
}

input UpdateInput {
  firstName: String
  lastName: String
  middleName: String
  company: String
  position: String
}

"""Game ID sent when new game created."""
type CreateGameResponse {
  gameID: String!
}

"""Input type for move that is executed"""
input HalfMoveInput {
  from: String!
  to: String!
  color: String!
  piece: String!
  take: String
  castle: String
  enPassant: Boolean
  check: String
  promotion: String
}