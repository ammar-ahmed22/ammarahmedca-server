# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  """Gets metadata by id or pathname"""
  metadata(pathname: String, id: String): Metadata!

  """gets all metadata"""
  allMetadata: [Metadata!]!

  """Gets blog post metadata"""
  blogMetadata(publishedOnly: Boolean): [Metadata!]!

  """Gets project post metadata"""
  projectMetadata: [Metadata!]!

  """Gets content for blog by pathname."""
  content(pathname: String!): [Content!]!
  filterOpts: FilterOpts!

  """Gets all experiences."""
  experiences: [Experience!]!

  """Gets all skill values with optional filtering by type."""
  skills(onlyType: String): [Skill!]!

  """Gets all types for skills."""
  skillTypes: [String!]!
  user: User!
  getUserByID(userId: String!): User!
  testMovePlayerEmail: String!
  game(gameID: String!): Game!
  games: [Game!]!
}

"""Metadata model for blog and project posts"""
type Metadata {
  """ID of the page in Notion."""
  id: String!

  """Timestamp when page was last edited."""
  lastEdited: Timestamp!

  """Name of the page entry."""
  name: String!

  """Pathname for blog posts."""
  pathname: String

  """Month year string for project posts."""
  timeline: String

  """List of types for project or blog post."""
  type: [String!]

  """Programming languages used for project or blog post."""
  languages: [String!]

  """Frameworks used for project or blog post."""
  frameworks: [String!]

  """GitHub link for project or blog post."""
  github: String

  """External link for project or blog post."""
  external: String

  """Description for project or blog post."""
  description: String

  """Published date for project or blog post."""
  published: Timestamp

  """Boolean for blog post."""
  isBlog: Boolean

  """Boolean for project post."""
  isProject: Boolean

  """Read time in minutes for blog post."""
  readTime: Int

  """Category for blog post."""
  category: String

  """Boolean to show blog post."""
  isPublished: Boolean
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""Content block for blog."""
type Content {
  type: String!
  content: [TextOrImage!]!
}

"""Text or Image union type for content blocks."""
union TextOrImage = Text | Image

"""Object containing text properties."""
type Text {
  """Text content for rich text."""
  plainText: String!

  """Rich text annotations."""
  annotations: Annotations!
}

"""Object containing properties for rich text."""
type Annotations {
  """Bold text."""
  bold: Boolean!

  """Underlined text."""
  underline: Boolean!

  """Text with a line through it."""
  strikethrough: Boolean!

  """Inline code text."""
  code: Boolean!

  """Italicized text."""
  italic: Boolean!

  """Colored text."""
  color: String!

  """Name of language for code block."""
  language: String
}

"""Object containing image properties."""
type Image {
  """Image url."""
  url: String!

  """Image caption."""
  caption: String!
}

"""Metadata filter options."""
type FilterOpts {
  frameworks: [String!]!
  type: [String!]!
  languages: [String!]!
  category: [String!]!
}

"""Experience information."""
type Experience {
  """Company experience is for."""
  company: String!

  """Role at company."""
  role: String!

  """Description of experience."""
  description: [Text!]!

  """Type/Field of experience."""
  type: String!

  """Skills learned/employed at experience."""
  skills: [String!]!

  """Duration of experience."""
  timeframe: Timeframe!
}

"""Duration of experience (null end means currently active)"""
type Timeframe {
  """Start of experience."""
  start: Timestamp!

  """End of experience."""
  end: Timestamp
}

"""Skill information."""
type Skill {
  """Name of skill."""
  name: String!

  """Type categorization of skill."""
  type: String!

  """Competency in skill out of 100."""
  value: Int!
}

"""User for chess games"""
type User {
  """MongoDB id for user."""
  _id: ID!

  """Date user was created at."""
  createdAt: Timestamp!
  email: String!
  firstName: String!
  lastName: String!
  middleName: String
  company: String
  position: String
  foundBy: String
  profilePic: String
  record: Record!
  gameIDs: [String!]!
  emailConfirmed: Boolean!
}

type Record {
  wins: Int!
  losses: Int!
}

type Game {
  """MongoDB id for game."""
  _id: ID!

  """Date game was created at."""
  createdAt: Timestamp!
  moves: [Move!]!
  playerIDs: Players!
  lastMove: Move
  colorToMove: String!
  status: String!
}

type Move {
  fen: String!
  boardOpts: BoardOpts
  takes: Takes!
  executedMove: ExecutedMove!
}

type BoardOpts {
  castling: String
  enPassant: String
  halfMove: Int
  fullMove: Int
}

type Takes {
  white: [String!]!
  black: [String!]!
}

type ExecutedMove {
  from: Algebraic!
  to: Algebraic!
  pieceType: String!
  causedCheck: Boolean
}

type Algebraic {
  rank: Int!
  file: String!
}

type Players {
  white: String!
  black: String!
}

type Mutation {
  register(data: RegisterInput!): AuthPayload!
  newEmailCode: AuthPayload!
  confirmEmail(code: Int!): AuthPayload!
  login(password: String!, email: String!): AuthPayload!
  forgotPassword(email: String!): String!
  resetPassword(token: String!, newPassword: String!): String!
  updateUser(data: UpdateInput!): AuthPayload!
  createGame: CreateGameResponse!
  addMove(fen: String!, executedMove: ExecutedMoveInput!, boardOpts: BoardOptsInput, whiteTakes: [String!]!, blackTakes: [String!]!, gameID: String!): AuthPayload!
}

type AuthPayload {
  token: String!
}

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  middleName: String
  company: String
  position: String
  foundBy: String
  profilePic: String
}

input UpdateInput {
  firstName: String
  lastName: String
  middleName: String
  company: String
  position: String
}

type CreateGameResponse {
  gameID: String!
}

input ExecutedMoveInput {
  from: AlgebraicInput!
  to: AlgebraicInput!
  pieceType: String!
  causedCheck: Boolean
}

input AlgebraicInput {
  rank: Int!
  file: String!
}

input BoardOptsInput {
  castling: String
  enPassant: String
  halfMove: Int
  fullMove: Int
}